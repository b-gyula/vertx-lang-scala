/*
 * Copyright 2014 Red Hat, Inc.
 *
 * Red Hat licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */


package io.vertx.scala.ext

import scala.collection.JavaConverters._
import io.vertx.core.json.JsonObject
import io.vertx.core.json.JsonArray
import io.vertx.core.AsyncResult
import io.vertx.core.Handler
import scala.concurrent.Promise

import io.vertx.core.json.JsonArray
import io.vertx.ext.sql.{UpdateResult => JUpdateResult}
package object sql{


  type ResultSet = io.vertx.ext.sql.ResultSet
  object ResultSet {
    def apply() = new ResultSet()
    def apply(json: JsonObject) = new ResultSet(json)
    def apply( columnNames: scala.collection.immutable.List[java.lang.String] = null, next: io.vertx.ext.sql.ResultSet = null, numColumns: java.lang.Integer = null, numRows: java.lang.Integer = null, output: io.vertx.core.json.JsonArray = null, results: scala.collection.immutable.List[io.vertx.core.json.JsonArray] = null): ResultSet = {
      val ret = new ResultSet(new io.vertx.core.json.JsonObject(java.util.Collections.emptyMap[java.lang.String,java.lang.Object]()))
      if (columnNames != null) ret.setColumnNames(columnNames.asJava) 
      if (next != null) ret.setNext(next) 
      if (output != null) ret.setOutput(output) 
      if (results != null) ret.setResults(results.asJava) 
      ret
    }
  }



  type SQLOptions = io.vertx.ext.sql.SQLOptions
  object SQLOptions {
    def apply() = new SQLOptions()
    def apply(json: JsonObject) = new SQLOptions(json)
    def apply( autoGeneratedKeys: java.lang.Boolean = null, autoGeneratedKeysIndexes: io.vertx.core.json.JsonArray = null, catalog: java.lang.String = null, fetchDirection: io.vertx.ext.sql.FetchDirection = null, fetchSize: java.lang.Integer = null, maxRows: java.lang.Integer = null, queryTimeout: java.lang.Integer = null, readOnly: java.lang.Boolean = null, resultSetConcurrency: io.vertx.ext.sql.ResultSetConcurrency = null, resultSetType: io.vertx.ext.sql.ResultSetType = null, schema: java.lang.String = null, transactionIsolation: io.vertx.ext.sql.TransactionIsolation = null): SQLOptions = {
      val ret = new SQLOptions(new io.vertx.core.json.JsonObject(java.util.Collections.emptyMap[java.lang.String,java.lang.Object]()))
      if (autoGeneratedKeys != null) ret.setAutoGeneratedKeys(autoGeneratedKeys) 
      if (autoGeneratedKeysIndexes != null) ret.setAutoGeneratedKeysIndexes(autoGeneratedKeysIndexes) 
      if (catalog != null) ret.setCatalog(catalog) 
      if (fetchDirection != null) ret.setFetchDirection(fetchDirection) 
      if (fetchSize != null) ret.setFetchSize(fetchSize) 
      if (maxRows != null) ret.setMaxRows(maxRows) 
      if (queryTimeout != null) ret.setQueryTimeout(queryTimeout) 
      if (readOnly != null) ret.setReadOnly(readOnly) 
      if (resultSetConcurrency != null) ret.setResultSetConcurrency(resultSetConcurrency) 
      if (resultSetType != null) ret.setResultSetType(resultSetType) 
      if (schema != null) ret.setSchema(schema) 
      if (transactionIsolation != null) ret.setTransactionIsolation(transactionIsolation) 
      ret
    }
  }



  type UpdateResult = io.vertx.ext.sql.UpdateResult
  object UpdateResult {
    def apply() = new UpdateResult()
    def apply(json: JsonObject) = new UpdateResult(json)
    def apply( keys: io.vertx.core.json.JsonArray = null, updated: java.lang.Integer = null): UpdateResult = {
      val ret = new UpdateResult(new io.vertx.core.json.JsonObject(java.util.Collections.emptyMap[java.lang.String,java.lang.Object]()))
      if (keys != null) ret.setKeys(keys) 
      if (updated != null) ret.setUpdated(updated) 
      ret
    }
  }



}
